"""
The configuration file would look like this (sans those // comments):

{
    "authority": "https://login.microsoftonline.com/Enter_the_Tenant_Name_Here",
    "client_id": "your_client_id",
    "scope": ["https://graph.microsoft.com/.default"],
        // For more information about scopes for an app, refer:
        // https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow#second-case-access-token-request-with-a-certificate"

    "secret": "The secret generated by AAD during your confidential app registration",
        // For information about generating client secret, refer:
        // https://github.com/AzureAD/microsoft-authentication-library-for-python/wiki/Client-Credentials#registering-client-secrets-using-the-application-registration-portal

    "endpoint": "https://graph.microsoft.com/v1.0/users"

}

You can then run this sample with a JSON configuration file:

    python sample.py parameters.json
"""

import sys  # For simplicity, we'll read config file from 1st CLI param sys.argv[1]
import json
import logging

import requests
import msal


# Optional logging
# logging.basicConfig(level=logging.DEBUG)

config = json.load(open(sys.argv[1]))

# Create a preferably long-lived app instance which maintains a token cache.
app = msal.ConfidentialClientApplication(
    config["client_id"], authority=config["authority"],
    client_credential=config["secret"],
    # token_cache=...  # Default cache is in memory only.
                       # You can learn how to use SerializableTokenCache from
                       # https://msal-python.rtfd.io/en/latest/#msal.SerializableTokenCache
    )

# The pattern to acquire a token looks like this.
result = None

# Firstly, looks up a token from cache
# Since we are looking for token for the current app, NOT for an end user,
# notice we give account parameter as None.
result = app.acquire_token_silent(config["scope"], account=None)

if not result:
    logging.info("No suitable token exists in cache. Let's get a new one from AAD.")
    result = app.acquire_token_for_client(scopes=config["scope"])

if "access_token" in result:
    # Calling graph using the access token
    # graph_data = requests.get(  # Use token to call downstream service
    #    config["endpoint"],
    #    headers={'Authorization': 'Bearer ' + result['access_token']}, ).json()
    params = {"reading":[{"reason":"billing","reasonSpecified":False,"timePeriod":{"end":"2022-06-02T00:00:00","endSpecified":True,"start":"2022-05-26T00:00:00","startSpecified":True}}],"readingQuality":[],"readingType":[{"mRID":"0.0.5.4.1.1.12.0.0.0.0.0.0.0.0.3.72.0"}],"usagePoint":[{"mRID":"43d01f47-12fe-4bf1-baaa-11780d4e2bec"}]}
    meter_readings = requests.post(
        config["endpoint"],
        json=params,
        headers={'Authorization': 'Bearer ' + result['access_token'], 'Content-Type': 'application/json', 'Accept': 'application/json'}).json()
    print("Netstream API call result: ")
    print(json.dumps(meter_readings, indent=2))
else:
    print(result.get("error"))
    print(result.get("error_description"))
    print(result.get("correlation_id"))  # You may need this when reporting a bug

